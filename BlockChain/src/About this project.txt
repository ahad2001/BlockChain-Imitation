                                                                  BLOCK CHAIN PROJECT



The project is simple implementation of blockchain,it consists of 3 classes basically.

Class Block : -
In this class we have initialized all the components of a block which are hash(the own unique digital printing) of each blocks,the hash of the previous block,the time stamp(the time when a block is created),the data and the nonce(starting with 0)

Then there is the constructor of the Block class which is needed to create new blocks,it has two parameters,(those two are private properties that’s why only those two were passed as the parameter)

Then there is calculatehash function,which will calculate the hash for each block based on its DATA,PREVIOUS HASH,TIME,NONCE
It will combine all of these as a string and would apply SHA256 algorithm on them,which would produce a 40 digit hexadecimal unique code
This code is the hash of a block 

Class StringUtil :- This class is nothing but SHA256 algorithm,we don’t need to understand every bit of it,just assume this as an encryption algorithm which would take multiple number of strings.Process those strings in a complicated way and then finally make a single string out of those strings.which would be unique everytime.



Class mainblockchain(It is the main class here ) :- 
Here we first create a block by passing data and previous hash as arguments then we send that block to BLOCKMINING function which would mine the block.

In this Blockmining function we pass the block and a integer called difficulty which is basically the number of 0’s required in the first few digits of the generated hash calculated by CLACULATEHASH function.First blockmining function create a string with difficulty number of 0s.Then it checks if the first “difficulty” number of digits in the hash of the passed block is 0 or not.If not then it increases the nonce by 1 and call CALCULATEHASH function which again calculates the hash with increased nonce.all the nonce starts with 0,and gets increased with the step.When the hash of passed block to the BLOCKMINING function starts with “difficulty” number of 0s then the loop stops and it returns the hash of the passed block.

Then that block is added to the arraylist of blocks,this step is necessary because we want to represent all the components of a block in a specific format taken from GSONBUILDER Function,and this GSONBUILDER Function takes input as an arraylist,That’s why add all the blocks to the arraylist

Then we check the validity of the entire blockchain using CHECKVALIDITY Function.In this function we iterate through our arraylist to check if the calculated hash using CALCULATEHASH function of a block is already the hash of the block or not,if not then the hash of the block has been tampered by someone,thus making the whole blockchain corrupted.We also check if the previous hash of a block is exactly same as the calculated hash of the previous block by Calculating previous block’s hash using CALCULATEHASH Function.if not then the blockchain is corrupted.IF these two conditions are false for the entire blockchain’s arraylist,then the blockchain is not corrupted so it is absolutely fine.

Then we print the blockchain arraylist in a specific format that can be found from GSONBUILDER Function,that function takes the “blockchain” arraylist as an argument and returns a string in a  specific format where each blocks are surrounded with curly braces and Inside curly braces there are all the components of each block(hash,previoushash,date,nonce,data)



P.S – This project is well rounded for now but I have a plan for adding gui function in here and also make it like a real life blockchain which would be accessible as ADMIN AND USERS where they can enter data,make transactions,edit data and check the validity.

